install.packages('rsconnect')
rsconnect::setAccountInfo(name='vivek-booshan', token='818103448D153F2AC30C5C4AC15653C2', secret='Qb7oyM3/G6j6JcXh2/2g2xDgmmu+pNPkraTjxgAO')
library(rsconnect)
library(shiny)
install.packages('shiny')
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
library(shiny)
library(ggplot2)
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
)
runApp()
PWD
"PWD"
Sys.getenv("PWD")
cd "repos/syspharm/hw/hw5"
setwd("~/repos/syspharm/hw/hw5")
Sys.getenv("PWD")
Sys.getenv("PWD")
setwd(Sys.getenv("PWD"))
Sys.getenv("PWD")
shiny::runApp('repos/syspharm/hw/hw5')
runApp('repos/syspharm/hw/hw5')
runApp('repos/syspharm/hw/hw5')
Sys.getenv("PWD")
ls
shiny::runApp('repos/syspharm/hw/hw5/q3')
wIIV = read.csv("wIIV.txt", header = FALSE, col.names = c("t", "V_IIV", "CL_IIV", "ka_IIV", "kCL_IIV"))
setwd(Sys.getenv("PWD"))
wIIV = read.csv("wIIV.txt", header = FALSE, col.names = c("t", "V_IIV", "CL_IIV", "ka_IIV", "kCL_IIV"))
woIIV = read.csv("woIIV.txt", header = FALSE, col.names=c("t", "V", "CL", "ka", "kCL"))
merged = merge(wIIV, woIIV, by="t")
merged
wIIV = read.csv("wIIV.txt", header = FALSE, col.names = c("wt", "V_IIV", "CL_IIV", "ka_IIV", "kCL_IIV"))
woIIV = read.csv("woIIV.txt", header = FALSE, col.names=c("wt", "V", "CL", "ka", "kCL"))
merged = merge(wIIV, woIIV, by="wt")
merged
runApp()
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv")
df
runApp()
runApp()
runApp()
runApp()
runApp()
merged
pivot_longer(merged, cols=everything())
runApp()
wIIV
runApp()
read.csv("fixed_IIV.txt", header=FALSE)
read.csv("fixed_woIIV.txt", header=FALSE)
AUC_fixed_IIV = read.csv("fixed_IIV.txt", header=FALSE, col.names = c("wt", "fixed_IIV"))
AUC_fixed = read.csv("fixed_woIIV.txt", header=FALSE, col.names = c("wt", "fixed"))
AUC_weight_IIV = read.csv("weight_IIV.txt", header=FALSE, col.names = c("wt", "weight_IIV"))
AUC_weight = read.csv("weight_woIIV.txt", header=FALSE, col.names=c("wt", "weight"))
merge_fixed = merge(AUC_fixed, AUC_fixed_IIV, by="wt")
merge_weight = mergee(AUC_weight, AUC_weight_IIV, by="wt")
merge_weight = merge(AUC_weight, AUC_weight_IIV, by="wt")
pivot_AUC = pivot_longer(merge(merge_fixed, merge_weight, by="wt"), cols=everything())
pivot_AUC
runApp()
runApp()
pivot_IIV
merged
merged[, 1:6]
merged[, 1:5]
merged[, c(1, 3, 5)]
merged[, c(1, 6:10)]
merged[, c(1, 6:9)]
pivot_AUC
pivot_AUC[name == wt]
merge_fixed
merged
wIIV = read.csv("wIIV.txt", header = FALSE, col.names = c("wt", "V_IIV", "CL_IIV", "ka_IIV", "kCL_IIV"))
woIIV = read.csv("woIIV.txt", header = FALSE, col.names=c("wt", "V", "CL", "ka", "kCL"))
pivot_IIV = pivot_longer(merge(log(wIIV), log(woIIV), by="wt"), cols=everything())
pivot_IIV
pivot_IIV %>% filter(name %in% c("category1", "category2"))
pivot_IIV
filter(pivot_IIV, name %in% c("wt", "V_IIV"))
paste0(c("V", "CL", "ka", "kCL"), "IIV")
paste0(c("V", "CL", "ka", "kCL"), "_IIV")
pivot_AUC
runApp()
